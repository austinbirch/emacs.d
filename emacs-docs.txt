General:
try to use Capslock as Control wherever possible
C-. is my new m-x
- meta-up moves text up
- meta-down moves text down
- s-5 -> Delete Window
- s-0 -> Line-Numbers on / off

Evil Leader:
,t      Toggle back and forth between last buffers
,p      Go to previous buffer (i.e. back button)
,n      Open new empty buffer

,re     Recent open files
,rl     Revert current buffer (reload)

,d      Task-mode 'done'
,a      Task-mode 'archive all done'
,a      Task-mode 'new todo'

,l      List all open buffers (care, this mode is not evil-compatible!)

,c      Close current Window

,:      Command history (like vim recent commands, not perfect but close)
,f      Ace-Jump (i.e. Vim EasyMotion)
,/      Toggle comments

Evil-Surround:
- You can surround in visual-state with s<textobject><trigger> or in normal-state with ys<textobject><trigger> (i.e. ysw')
- You can change a surrounding with cs<old-trigger><new-trigger> (i.e. cs*')
- You can delete a surrounding with cd<old-trigger><new-trigger>.
- i.e: 'Hello world!' -> cs'<q> -> <q>Hello world!</q>

Omnicomnpletion:
mx omnicompletion-like-vim loads vim like omnicompletion for all words
s-. -> helm-complete-filename-at-point: press this for filename completion in a buffer
s-/ -> Hippie Expand, but doesn't have a menu either

Search:
helm-do-grep for fast grep in current diredtory and what not !
mx ack is a better and faster search then grep or helm-do-grep

Navigation:
C-` is the mode where each buffer shows a number
C-c SPC -> ace jump mode
C-u C-u C-c SPC” ⇒ ace-jump-line-mode
mx helm-bookmarks allows to set bookmarks to often-used files

Narrow / Widen:
- 'narrow-to-region
- 'widen

Zencoding:
<C-j>

lisp:
C-x C-e OR C-' -> Eval  Expression
C-5 (i.e. anstatt % (shift-5)) -> in evil visual selection of block form (), {}, [], ...

Paredit:
C-j => break and continue
C-d => forward-delete
M-d => forward-delete word
M-DEL => backwards delete word
M-<Up> => splice sexp killing backward (remove sexp before cursor)
M-<Down> => splice sexp killing forward (remove sexp before cursor)
M-r => raise sexp, some weird stuff that moves the current sexp up
C-) => (use caps lock + shift + 0) move the next sexp into the current one. cursor is *in* the current expression
C-} => move the next sexp away from the current one
C-( => (use caps lock + shift + 9) move the previous sexp into the current one. cursor is *in* the current expression
C-{ => move the previous sexp away from the current one


Org-mode:
http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html
- all *, **, etc inserts have to have no indetation.
- * M-shift-RET to insert another headline on the same level
- C-c C-t to cycle a task from Todo to Done
- shift-tab gives overviews of documents
http://orgmode.org/guide/Plain-lists.html#Plain-lists
- Unordered list items start with ‘-’, ‘+’, or ‘*’ as bullets.
- Ordered list items start with ‘1.’ or ‘1)’.
- Description list use ‘ :: ’ to separate the term from the description.
- C-c C-c (if there's a checkbox) check or uncheck it
Org-Table:
http://orgmode.org/guide/Tables.html#Tables
- Create table: Just type the Table signature |Name|Phone|Age|More   and hit C-c RET
- Insert row: Just TAB through the colums and new rows will appear
- C-c C-c: Realign Table without moving the cursor
- C-c -: Insert new horiontal line below cursor
- C-c ^: Sort table (has to be in the column to be sorted)
http://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html
- To insert a formula, type like this :=vmean(@2$3..@4$3)
- To see column / row lables for formula, do C-c }
- TO update formulas, go to the TBLFM line and type C-c C-c
- Better Formula editing: C-' and then use S-left/S-right etc on the markers to shift the formulas
Org-Babel:
http://orgmode.org/worg/org-contrib/babel/intro.html
http://www.johndcook.com/blog/2012/02/09/python-org-mode/
#+begin_src python
-- python code
#+end_src
insert codes. if I'm in one of htese blocks, C-c ' will open it in a buffer for editing. in there C-c ' will close the buffer and save


C-c ? Will give me the field reference

DEBUGGING:
I use debug. These are common entry points (ways to use it)
- M-x debug-on-entry followed by a function you want to enter using the debugger.
- M-x toggle-debug-on-error -- Enter the debugger when when an error is raised.
- M-x toggle-debug-on-quit -- Enter the debugger when the user hits C-g.

- Place explicit calls to function debug at particular places (breakpoints) in your code, to enter the debugger at those places
    (debug)
- You step through the debugger using d, or c to skip over the details of a particular evaluation.



Interesting Extensions:

fiplr: Fuzzy file finder like the one in vim
            -> fiplr-find-file
grizzl: fast fuzzy search index, used by fiplr

htmlize: Convert the current buffer with syntax coloring to html. sadly, doesn't work with my color settings / scheme

Fantastic javascript completion via
(require 'js2)
(require 'ac-js2)

try indent-guide

try litable: https://github.com/Fuco1/litable

move-text

pos-tip: show tooltip at point

restclient: an interactive http clien

simple-httpd: pure emacs webserver (wtf?)

skewer-mode: live browser javascript interaction

splitter: manage window splits

EMACS SPEEDBAR!
sr-speedbar

svg-mode-line-themes looks like a great idea!

wgrep: edit a grep buffer, and apply those changes to the files

wrap-region, macht sowas wie ycsw mit vim

zlc provides zsh like completion etc for all parts of emcas


Interesting Lisp Packages:
furl: friendly url retrieval -> furl
      (furl-retrieve "http://www.heise.de" (lambda (x) (message x)))

Twiddle-Mode
This is a program for testing hand-written HTTP requests. You write your request in an Emacs buffer (using http-twiddle-mode) and then press `C-c C-c' each time you want to try sending it to the server. This way you can interactively debug the requests. To change port or
destination do `C-u C-c C-c'.

The mode is activated by `M-x http-twiddle-mode' or automatically
when opening a filename ending with .http-twiddle.

Example buffer

POST / HTTP/1.0
Connection: close
Content-Length: $Content-Length

<The request body goes here>


